//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTests.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISampleService")]
    public interface ISampleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetData", ReplyAction="http://tempuri.org/ISampleService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetData", ReplyAction="http://tempuri.org/ISampleService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfFoo", ReplyAction="http://tempuri.org/ISampleService/GetIdOfFooResponse")]
        System.Guid GetIdOfFoo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfFoo", ReplyAction="http://tempuri.org/ISampleService/GetIdOfFooResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdOfFooAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfBar", ReplyAction="http://tempuri.org/ISampleService/GetIdOfBarResponse")]
        System.Guid GetIdOfBar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfBar", ReplyAction="http://tempuri.org/ISampleService/GetIdOfBarResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdOfBarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfSingleton", ReplyAction="http://tempuri.org/ISampleService/GetIdOfSingletonResponse")]
        System.Guid GetIdOfSingleton();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfSingleton", ReplyAction="http://tempuri.org/ISampleService/GetIdOfSingletonResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdOfSingletonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfTransient", ReplyAction="http://tempuri.org/ISampleService/GetIdOfTransientResponse")]
        System.Guid GetIdOfTransient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfTransient", ReplyAction="http://tempuri.org/ISampleService/GetIdOfTransientResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdOfTransientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfSelf", ReplyAction="http://tempuri.org/ISampleService/GetIdOfSelfResponse")]
        System.Guid GetIdOfSelf();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/GetIdOfSelf", ReplyAction="http://tempuri.org/ISampleService/GetIdOfSelfResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdOfSelfAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/BarEqualsFooBar", ReplyAction="http://tempuri.org/ISampleService/BarEqualsFooBarResponse")]
        bool BarEqualsFooBar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/BarEqualsFooBar", ReplyAction="http://tempuri.org/ISampleService/BarEqualsFooBarResponse")]
        System.Threading.Tasks.Task<bool> BarEqualsFooBarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/ResolutionWorksForAsyncOperations", ReplyAction="http://tempuri.org/ISampleService/ResolutionWorksForAsyncOperationsResponse")]
        bool ResolutionWorksForAsyncOperations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISampleService/ResolutionWorksForAsyncOperations", ReplyAction="http://tempuri.org/ISampleService/ResolutionWorksForAsyncOperationsResponse")]
        System.Threading.Tasks.Task<bool> ResolutionWorksForAsyncOperationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISampleServiceChannel : IntegrationTests.ServiceReference.ISampleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SampleServiceClient : System.ServiceModel.ClientBase<IntegrationTests.ServiceReference.ISampleService>, IntegrationTests.ServiceReference.ISampleService {
        
        public SampleServiceClient() {
        }
        
        public SampleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SampleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Guid GetIdOfFoo() {
            return base.Channel.GetIdOfFoo();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdOfFooAsync() {
            return base.Channel.GetIdOfFooAsync();
        }
        
        public System.Guid GetIdOfBar() {
            return base.Channel.GetIdOfBar();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdOfBarAsync() {
            return base.Channel.GetIdOfBarAsync();
        }
        
        public System.Guid GetIdOfSingleton() {
            return base.Channel.GetIdOfSingleton();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdOfSingletonAsync() {
            return base.Channel.GetIdOfSingletonAsync();
        }
        
        public System.Guid GetIdOfTransient() {
            return base.Channel.GetIdOfTransient();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdOfTransientAsync() {
            return base.Channel.GetIdOfTransientAsync();
        }
        
        public System.Guid GetIdOfSelf() {
            return base.Channel.GetIdOfSelf();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdOfSelfAsync() {
            return base.Channel.GetIdOfSelfAsync();
        }
        
        public bool BarEqualsFooBar() {
            return base.Channel.BarEqualsFooBar();
        }
        
        public System.Threading.Tasks.Task<bool> BarEqualsFooBarAsync() {
            return base.Channel.BarEqualsFooBarAsync();
        }
        
        public bool ResolutionWorksForAsyncOperations() {
            return base.Channel.ResolutionWorksForAsyncOperations();
        }
        
        public System.Threading.Tasks.Task<bool> ResolutionWorksForAsyncOperationsAsync() {
            return base.Channel.ResolutionWorksForAsyncOperationsAsync();
        }
    }
}
